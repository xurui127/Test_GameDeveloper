

Q1: Fix or improve the implementation of the below methods


--Instead of passing the player object to the delayed function, 
--pass the player's ID. This prevents potential issues with 
--the player object becoming invalid before the function executes.

local function releaseStorage(playerId)
  local player = Player(playerId)
  if player then
    player:setStorageValue(1000, -1)
  end
end

function onLogout(player)
  if player:getStorageValue(1000) == 1 then -- change to 1. If it is equal to 1, it will not pass this Event
    addEvent(releaseStorage, 1000, player:getId())
  end
  return true
end


--Q2: Fix or improve the implementation of the below method

--Added proper handling of the query result to iterate through all 
--the returned rows and free the result set afterwards.
--Also added a check to handle the case where no results are found.

function printSmallGuildNames(memberCount)
  -- this method is supposed to print names of all guilds that have less than memberCount max members
  local selectGuildQuery = string.format("SELECT name FROM guilds WHERE max_members < %d;", memberCount)
  local resultId = db.storeQuery(selectGuildQuery)

  if resultId then                                               -- answer from here
    repeat
      local guildName = result.getString(resultId, "name")
      print(guildName)
    until not result.next(resultId)
    result.free(resultId)                                       -- to here
  else
    print("No guilds found with less than " .. memberCount .. " members.")
  end
end

Q3: Fix or improve the name and the implementation of the below method


-- Improved the function name to removeMemberFromPlayerParty
-- for better clarity. Added checks to ensure player, party, 
-- and member are valid. Used v:getId() for comparison instead of the 
--object itself to avoid issues with object references.

function removeMemberFromPlayerParty(playerId, memberName)
  local player = Player(playerId)
  if not player then return end

  local party = player:getParty()
  if not party then return end

  local member = Player(memberName)
  if not member then return end

  for _, v in pairs(party:getMembers()) do
    if v:getId() == member:getId() then
      party:removeMember(member)
      break
    end
  end
end

Q4: Assume all method calls work fine. Fix the memory leak issue 
    in below method


//Added delete player; after IOLoginData::savePlayer(player); 
//when the player is offline to ensure the player object is 
//properly deleted, preventing a memory leak.
    void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
  Player* player = g_game.getPlayerByName(recipient);
  if (!player) {
    player = new Player(nullptr);
    if (!IOLoginData::loadPlayerByName(player, recipient)) {
      delete player;
      return;
    }
  }

  Item* item = Item::CreateItem(itemId);
  if (!item) {
    return;
  }

  g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

  if (player->isOffline()) {
    IOLoginData::savePlayer(player);
    delete player; // Add this line to fix the memory leak
  }
}